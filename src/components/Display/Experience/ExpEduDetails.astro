---
import type { z } from "astro:content";
import type { expEduDetailsSchema } from "../../../schemas/expEduDetailsSchema";
import dayjs from "dayjs";

const MONTH_FORMAT = "MMMM YYYY";
const YEAR_FORMAT = "YYYY";

interface Props {
  details: z.infer<typeof expEduDetailsSchema>;
  month: boolean;
}

const {
  details: { title, organisation, startDate, endDate, location, roleType },
  month,
} = Astro.props;

let formattedStartDate;
let formattedEndDate;

const parsedStateDate = dayjs(startDate);
const parsedEndDate = dayjs(endDate);

if (month) {
  formattedStartDate = parsedStateDate.format(MONTH_FORMAT);
  formattedEndDate = parsedEndDate.format(MONTH_FORMAT);
} else {
  formattedStartDate = parsedStateDate.format(YEAR_FORMAT);
  formattedEndDate = parsedEndDate.format(YEAR_FORMAT);
}

if (endDate == null) {
  formattedEndDate = "Present";
}
---

<div class="root">
  <h3 class="title">{title}</h3>
  <span class="organisation">{organisation}</span>
  <span class="date">
    {formattedStartDate} - {formattedEndDate}
  </span>
  <span class="locationRole">
    {location} - {roleType}
  </span>
</div>

<style lang="scss">
  @import "../../../styles/globals.scss";

  .root {
    padding: var(--paddingDouble) var(--paddingHalf) var(--paddingHalf);
    display: flex;
    flex-direction: column;
  }

  .title {
    padding-bottom: var(--paddingHalf);
  }

  .organisation {
    padding: 0 0 var(--padding);
  }

  .organisation,
  .locationRole,
  .date {
    color: $textMediumEmphasis;
  }

  .locationRole,
  .date {
    padding: unset;
    font-size: var(--fontSizeSmall);
  }

  @include bp-small {
    .wrapper {
      border-radius: var(--borderRadius);
      max-width: calc(var(--contentMaxWidth) + var(--paddingDouble) * 2);
    }

    .root {
      padding: var(--paddingDouble) var(--paddingDouble) var(--padding);
    }
  }
</style>
