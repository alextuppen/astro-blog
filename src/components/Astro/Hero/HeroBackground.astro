<canvas id="hero-background-canvas"></canvas>

<script>
  import debounce from "lodash.debounce";

  import type { Column } from "./HeroBackground.types";

  const rootStyle = getComputedStyle(document.body);
  const paddingValue = rootStyle.getPropertyValue("--padding");
  const parsedPadding = parseFloat(paddingValue.replace("rem", ""));
  const rootFontSize = parseFloat(rootStyle.fontSize);
  const headerHeight = parsedPadding * rootFontSize * 3;

  const canvas = document.getElementById("hero-background-canvas");
  if (canvas == null || !(canvas instanceof HTMLCanvasElement)) {
    throw new Error("Canvas not found");
  }

  const context = canvas.getContext("2d", { alpha: false });

  function generateRandomNumber(min: number, max: number) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  let canvasWidth: number;
  let canvasHeight: number;
  let columns: Column[] = [];
  let totalPossibleColumns: number;

  function setCanvasSize() {
    canvasWidth = document.body.clientWidth;
    canvasHeight = document.body.clientHeight - headerHeight;

    totalPossibleColumns = Math.floor((canvasWidth / rootFontSize) * 1.5);
    refreshAllColunns();

    if (canvas == null || !(canvas instanceof HTMLCanvasElement)) {
      throw new Error("Canvas not found");
    }
    canvas.width = canvasWidth;
    canvas.height = canvasHeight;
  }

  function generateColumn(pageLoad: boolean) {
    const columnLength = generateRandomNumber(20, 50);
    const columnChars = [];

    const alphaIncrement = 0.4 / columnLength;
    const gradient = [];

    for (let i = 1; i <= columnLength; i++) {
      // Generate between 97 and 122 (ASCII for lowercase letters)
      const randAscii = generateRandomNumber(97, 122);
      columnChars.push(String.fromCharCode(randAscii));

      gradient.push(alphaIncrement * i);
    }

    let currentChar = 0;
    let charsRemaining = columnLength;
    if (pageLoad) {
      const columnProgress = generateRandomNumber(0, columnLength);
      if (Math.random() < 0.5) {
        currentChar = columnProgress;
      } else {
        currentChar = columnLength;
        charsRemaining = columnProgress;
      }
    }

    const fontSize = generateRandomNumber(
      0.75 * rootFontSize,
      1.25 * rootFontSize,
    );
    const xCoord = generateRandomNumber(0, canvasWidth);
    const yCoord = generateRandomNumber(-(canvasHeight * 0.25), canvasHeight);
    const timeBetweenRenders = generateRandomNumber(200, 300);

    columns.push({
      chars: columnChars,
      currentChar,
      charsRemaining,
      gradient,
      fontSize,
      xCoord,
      yCoord,
      prevRender: 0,
      timeBetweenRenders,
    });
  }

  function renderColumn(ctx: CanvasRenderingContext2D, column: Column) {
    const {
      chars,
      currentChar,
      charsRemaining,
      gradient,
      fontSize,
      xCoord,
      yCoord,
    } = column;

    const length = chars.length;
    const fadeInGradient = gradient.slice(-currentChar);
    const fadeOutGradient = Array(length - charsRemaining)
      .fill(0)
      .concat(gradient);

    for (let i = 0; i !== currentChar; i++) {
      if (charsRemaining !== length && charsRemaining + i < length) {
        continue;
      }

      const char = chars[i];
      if (char == null) {
        throw new Error(`Character at index ${i} in char is not defined`);
      }

      let colour: string;
      if (i === currentChar - 1 && charsRemaining === length) {
        colour = "#f9ab01";
      } else {
        if (charsRemaining === length) {
          colour = `rgba(255, 255, 255, ${fadeInGradient[i]})`;
        } else {
          colour = `rgba(255, 255, 255, ${fadeOutGradient[i]})`;
        }
      }

      ctx.shadowColor = colour;
      ctx.fillStyle = colour;
      ctx.font = `${fontSize}px "Matrix", sans-serif`;
      ctx.shadowBlur = fontSize * 0.75;
      ctx.fillText(char, xCoord, yCoord + fontSize * i);
    }
  }

  function refreshAllColunns() {
    columns = [];
    for (let i = 0; i < totalPossibleColumns; i++) {
      generateColumn(true);
    }
  }

  function animate() {
    if (canvas == null || !(canvas instanceof HTMLCanvasElement)) {
      throw new Error("Canvas not found");
    }
    if (context == null || !(context instanceof CanvasRenderingContext2D)) {
      throw new Error("Context not found");
    }

    context.clearRect(0, 0, canvas.width, canvas.height);
    context.textAlign = "center";
    const now = window.performance.now();
    const newColumns: Column[] = [];

    if (columns.length < totalPossibleColumns) {
      generateColumn(false);
    }

    for (const column of columns) {
      const {
        chars,
        currentChar,
        charsRemaining,
        prevRender,
        timeBetweenRenders,
      } = column;

      if (now - prevRender < timeBetweenRenders) {
        renderColumn(context, column);
        newColumns.push(column);
      } else {
        renderColumn(context, column);

        const newColumn = {
          ...column,
          prevRender: window.performance.now(),
        };

        if (currentChar < chars.length) {
          newColumn.currentChar = newColumn.currentChar + 1;
          newColumns.push(newColumn);
        } else if (charsRemaining > 0) {
          newColumn.charsRemaining = newColumn.charsRemaining - 1;
          newColumns.push(newColumn);
        }
      }
    }

    columns = newColumns;
    window.requestAnimationFrame(animate);
  }

  setCanvasSize();

  window.addEventListener("resize", debounce(setCanvasSize, 150));

  const matrixFont = new FontFace("Matrix", "url(fonts/matrix.otf)");
  matrixFont.load().then((font) => {
    refreshAllColunns();

    document.fonts.add(font);
    animate();
  });
</script>

<style lang="scss">
  @import "src/styles/_globals.scss";
  @import "src/styles/typography.scss";

  canvas {
    border-bottom: 1px solid $text;
  }
</style>
