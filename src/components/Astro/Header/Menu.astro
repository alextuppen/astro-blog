---
import Button from "../Button.astro";
import { internalLinks, externalLinks } from "./Header.astro";
import MenuBurger from "./MenuBurger.astro";
---

<MenuBurger id={"menuBurger"} />
<div id="menu" class="menu">
  {
    internalLinks.map(({ link, text }, index) => (
      <>
        <Button href={link} variant="text" className="internal">
          {text}
        </Button>
        {index < internalLinks.length - 1 ? (
          <hr class:list={["menuSeparator", "internal"]} />
        ) : null}
      </>
    ))
  }
  <hr class:list={["primarySeparator", "internal"]} />
  {
    externalLinks.map(({ link, text }, index) => (
      <>
        <Button href={link} variant="text" external>
          {text}
        </Button>
        {index < externalLinks.length - 1 ? <hr class="menuSeparator" /> : null}
      </>
    ))
  }
</div>

<script>
  let open = false;
  const button = document.getElementById("menuBurger");
  const menu = document.getElementById("menu");

  if (button && menu) {
    const setElementsData = (value: "true" | "false") => {
      button.dataset.open = value;
      menu.dataset.open = value;
    };

    const toggleOpen = () => {
      if (open) {
        open = false;
        setElementsData("false");
      } else {
        open = true;
        setElementsData("true");
      }
    };

    setElementsData("false");

    button.addEventListener("click", () => {
      toggleOpen();
    });
  } else {
    console.error("menuBurger button and menu not found!");
  }
</script>

<style lang="scss">
  @import "src/styles/_globals.scss";
  @import "src/styles/typography.scss";

  .menu {
    position: absolute;
    top: calc(var(--paddingHalf) + 100%);
    right: calc(100% - var(--burger-width) - var(--borderRadius));
    @include elev-9();
    padding: var(--paddingHalf) var(--paddingHalf) var(--padding)
      var(--paddingHalf);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--paddingHalf);
    border-bottom-left-radius: var(--borderRadius);
    transition:
      opacity 250ms ease-in-out,
      transform 250ms ease-in-out;
    opacity: 0;
    transform-origin: top center;
    transform: scaleY(0);
  }

  .menu[data-open="true"] {
    opacity: 1;
    transform: scaleY(1);
  }

  .menuSeparator,
  .primarySeparator {
    width: 100%;
  }

  .menuSeparator {
    border-bottom-color: $text;
  }

  .primarySeparator {
    border-bottom-color: $primary;
  }

  @include bp-small {
    .menu {
      border-bottom-right-radius: var(--borderRadius);
    }

    .internal {
      display: none;
    }

    .internal-link {
      display: none;
    }
  }
</style>
