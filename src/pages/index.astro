---
import { Root } from "../layouts";
import { BlogRecipeItem, Button, Job, Section } from "../components";

import {
  URL_LINKEDIN,
  URL_INSTAGRAM,
  URL_GITHUB,
  SITE_DESCRIPTION,
} from "../consts";
import { getCollection } from "astro:content";

const recipes = await getCollection("recipes");
const recipe = recipes.find((recipe) => recipe.data.name === "Pea and chorizo orzo")
let transformedRecipe
if (recipe == null) {
  transformedRecipe = undefined
} else {
  transformedRecipe = {
    href: `/recipes/${recipe.id}`,
    title: recipe.data.name,
    src: recipe.data.image ? recipe.data.image[0] : undefined,
    alt: recipe.data.name,
    description: recipe.data.description,
  }
}

const blogPosts = await getCollection("blog");
const latestBlogPostIndex = blogPosts.reduce((accumulator, currentPost, currentPostIndex) => {
  const accumulatorPubDate = blogPosts[accumulator]?.data.pubDate;
  const currentPubDate = currentPost.data.pubDate;

  if (accumulatorPubDate == null || accumulatorPubDate < currentPubDate) {
    return currentPostIndex;
  }

  return accumulator;
}, 0)
const blogPost = blogPosts[latestBlogPostIndex];
let transformedBlogPost
if (blogPost == null) {
  transformedBlogPost = undefined
} else {
  transformedBlogPost = {
      href: `/blog/${blogPost.slug}`,
      title: blogPost.data.title,
      src: blogPost.data.heroImage,
      alt: blogPost.data.heroImageText,
      description: blogPost.data.description,
  }
}

const experiences = await getCollection("experiences");
const latestExperienceIndex = experiences.reduce((accumulator, currectExp, currectExpIndex) => {
  const accumulatorStartDate = experiences[accumulator]?.data.details.startDate;
  const currentStartDate = currectExp.data.details.startDate;

  if (accumulatorStartDate == null || accumulatorStartDate < currentStartDate) {
    return currectExpIndex
  }

  return accumulator
}, 0)
const latestExperience = experiences[latestExperienceIndex]?.data
---

<Root title={"Alex Tuppen"} description={SITE_DESCRIPTION}>
  <Section className="hero">
    <div class="grid">
      <img src="/logo/white.svg" alt="Alex Tuppen logo" class="atLogo" />
      <div class="nameWrapper">
        <h1 class="name">Alex</h1>
        <h1 class="name">Tuppen</h1>
      </div>
      <h2 class="tagLine">Full stack developer</h2>
      <div class="buttons">
        <Button variant="largeIcon" href={URL_LINKEDIN} external={true}>
          <img
            width="48"
            height="48"
            src="/icons/websites/linkedin.svg"
            alt="LinkedIn logo"
          />
        </Button>
        <Button variant="largeIcon" href={URL_INSTAGRAM} external={true}>
          <img
            width="48"
            height="48"
            src="/icons/websites/instagram.svg"
            alt="Instagram logo"
          />
        </Button>
        <Button variant="largeIcon" href={URL_GITHUB} external={true}>
          <img
            width="48"
            height="48"
            src="/icons/websites/github.svg"
            alt="Github logo"
          />
        </Button>
      </div>
    </div>
  </Section>
  <Section>
    {transformedRecipe != null ? (
      <Button variant={'text'} href="/recipes">
        <h2>Recipes</h2>
      </Button>
      <p>
        I enjoy the challenge of creating recipes that are as easy to cook as possible. 
        They are not complicated or fancy but they do use ingredients in standard UK supermarket 
        package sizes and generate as little washing up as possible. You can see all of my recipes 
        on the <a href="/recipes">recipes page</a> or click the card below to go straight to my
        favourite recipe. Please let me know what you think if you cook one of them!
      </p>
      <ul class="list">
        <BlogRecipeItem item={transformedRecipe} />
      </ul>
    ) : null}
    {transformedBlogPost != null ? (
      <Button variant={'text'} href="/blog">
        <h2>Blog</h2>
      </Button>
      <p>
        I am also trying to improve my technical writing and document the most interesting 
        technical projects I have worked on. You can read my latest blog post by clicking 
        on the card below or see all posts by going to the <a href="/blog">blog page.</a> 
        If you have any feedback on any of the posts I'd love to hear it.
      </p>
      <ul class="list">
        <BlogRecipeItem item={transformedBlogPost} />
      </ul>
    ) : null}
    {latestExperience != null ? (
      <Button variant="text" href="/experience">
        <h2>Experience</h2>
      </Button>
      <p>
        I started my career in IT but rapidly discovered that scripting was far more interesting 
        than turning computers off and on again. PowerShell scripting soon led to C# and .Net 
        desktop applications, but the world of custom MSIs and WPF felt constrained so I taught
        myself JavaScript and React and I haven't looked back. My latest/current role is displayed 
        below, to see my past roles please <a href="/experience">click here.</a>
      </p>
      <Job data={latestExperience} />
    ) : null}
  </Section>
</Root>

<style lang="scss">
  @import 'src/styles/_globals.scss';
  @import 'src/styles/typography.scss';

  .hero {
    // 100 small view height - (2 x double padding (4) on section + rough height of header (3))
    height: calc(100svh - (7 * var(--padding)));
  }

  .grid {
    display: grid;
    grid-template-areas:
      "atLogo"
      "nameWrapper"
      "tagLine"
      "buttons";
    justify-items: center;
    align-items: center;
    gap: var(--paddingDouble);
  }

  .atLogo {
    grid-area: atLogo;
    width: 10rem;
  }

  .nameWrapper {
    grid-area: nameWrapper;
    display: flex;
    flex-direction: column;
  }

  .name {
    margin: auto;
    font-size: 4rem;
    line-height: 1;
  }

  .tagLine {
    grid-area: tagLine;
    font-size: 1.5rem;
    font-weight: 500;
  }

  .buttons {
    grid-area: buttons;
    display: flex;
    gap: var(--paddingDouble);
  }

  p {
    padding-left: var(--paddingHalf);
    padding-right: var(--paddingHalf);
  }

  .list {
    list-style-type: none;
    display: flex;
    flex-direction: column;
    gap: var(--paddingDouble);
    margin: unset;
    padding: unset;
  }

  @include bp-small {
    .grid {
      grid-template-areas:
        "atLogo nameWrapper"
        "tagLine tagLine"
        "buttons buttons";
    }

    .name {
      margin: 0;
      font-size: 6rem;
      text-align: left;
    }

    .tagLine {
      font-size: 2.25rem;
    }
  }

  @include bp-medium {
    .atLogo {
      width: 12rem;
    }

    .name {
      font-size: 7rem;
    }

    .tagLine {
      font-size: 2.5rem;
    }
  }

  @include bp-large {
    .atLogo {
      width: 16rem;
    }

    .name {
      font-size: 9rem;
    }

    .tagLine {
      font-size: 3rem;
    }
  }

  @include bp-xl {
    .atLogo {
      width: 20rem;
    }

    .name {
      font-size: 12rem;
    }

    .tagLine {
      font-size: 3.75rem;
    }
  }
</style>
